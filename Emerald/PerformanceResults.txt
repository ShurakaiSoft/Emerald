This file documents my finding on some rough performance testing.

For consistency all searches are performed with the string "qwertyuiop" on the
same hardware under similar load. These figures are a rough guide only.


Version 3.0
No specific optimizations in this version were aimed at improving the search
time however there was a small and measurable improvement.
Time: around 3.5 seconds.


Version 2.3
Dictionary uses the previous hashed binary search. However the substring
routine is optimized to create a unique list before permutations are generated
and added to the results list.
Time: around 3.6 seconds.

Version 2.2
Dictionary uses a hash table based on word length and a binary search on that 
subset of words. Also the search space only mutates a string and it's
substrings if the string contains at least one vowels.
Time: around 1 minute 1 second.

Version 2.1
Dictionary uses a hash table based on word length and a binary search on that
subset of words. The search space was the same complete set of permutations as
the previous version. 
Time: around 1 minute and 5 seconds.

Version 2.0
This version used a binary search of the dictionary file with the same complete
set of permutations as the original version.
Time: around 1 minute and 8 seconds.

Version 1
The first functional version of this application. It uses a very simple linear
search of the dictionary file. The search space was a complete set of
permutations of the search string and all it's substrings.
Time = around 55 minutes.
